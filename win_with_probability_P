'''
we have two players and a fair coin, the goal is design the game to win with given probability P:
1- we can consider n, k as follows:
n:total number of trials for each player
k:minimum number of times a coin  successes in a sequence of n trials (e.g. lands head  at least k times and lands tail  at most n-k times)

Objective is to design a game that we guarantee that you can win with probability equal to P
this probability can be computed as: cpmf= cumulative pmf, where pmf is the probability mass function that follows binomial distribution. 
pmf= [different ways of distributing k in a sequence of n trials]*[(1/2)^k][(1/2)^(n-k))
Then we need to find the cumulative pmf for all successes greater than k, since winner must have k or more successes.
   
# So we need to design  k and n given probability P.
I iterate through different values of n and k and compute the cpmf for each of those k and n. then I calculate the error as abs(P-cpmf) and 
try to find  the minimum value of error and the corresponding values of n and k.
After running the code, I found the optimum values of n, k, probability for given probability 0.7 as follows:
**** total number of trials: 15
**** minimum number of tails/heads to win :7
*** probability of winning : 0.696380615234375
'''

import math
import operator as op
from functools import reduce
def design_game(P):
    
    min_error=1
    for n in range(20):
        
        for k in range(1,n):
            #compute combination formula:nck 
            cpmf=0
            for c in range(k,n+1):
                cpmf+=nck(n,c)*pow(0.5,c)*pow(0.5,(n-c))
            #print (n,k,cpmf)
            error=abs(cpmf-P)
            
            if error<min_error :
                print (error,'is smaller than',min_error)
                min_error=error
                desired_k=k
                desired_n=n
                final_win_probability=cpmf
            
    return desired_n,desired_k,final_win_probability,min_error,
        
        

def nck(n, k):
    k = min(k, n-k)
    top = reduce(op.mul, range(n, n-k, -1), 1)
    bottom = reduce(op.mul, range(1, k+1), 1)
    return top / bottom
[n,k,p,e]=design_game(0.7)   
print("n: ",n)
print("k: ",k)
print("Probability of winning: ",p) 
print("error: ",e) 
'''
#--------------------------------------   Results -----------------------------------------------------------------
0.050000000000000044 is smaller than 1                                                                                          
0.012499999999999956 is smaller than 0.050000000000000044                                                                       
0.009472656250000044 is smaller than 0.012499999999999956                                                                       
0.0036193847656249556 is smaller than 0.009472656250000044                                                                      
n:  15                                                                                                                          
k:  7                                                                                                                           
Probability of winning:  0.696380615234375 
'''                                                                                     
error:  0.0036193847656249556
